<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PanxyCris</title>
    <link>https://panxycris.github.io/</link>
      <atom:link href="https://panxycris.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>PanxyCris</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 25 Jan 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://panxycris.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>PanxyCris</title>
      <link>https://panxycris.github.io/</link>
    </image>
    
    <item>
      <title>Scalability</title>
      <link>https://panxycris.github.io/note/system-design/scalability/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/system-design/scalability/</guid>
      <description>&lt;p&gt;Handle an amount of work that resources can be added to the system.&lt;/p&gt;
&lt;h2 id=&#34;two-modes&#34;&gt;Two modes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vertical scale&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;add more computing power -&amp;gt; single node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Horizontal scale&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;add more machines or resources -&amp;gt; more nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;load-balancing&#34;&gt;Load Balancing&lt;/h2&gt;
&lt;h3 id=&#34;target&#34;&gt;Target&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Minimize server response time&lt;/li&gt;
&lt;li&gt;Maximize throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Random&lt;/li&gt;
&lt;li&gt;Round Robin&lt;/li&gt;
&lt;li&gt;Least Connection&lt;/li&gt;
&lt;li&gt;Least Response Time&lt;/li&gt;
&lt;li&gt;Least Bandwith&lt;/li&gt;
&lt;li&gt;Hashing
&lt;ul&gt;
&lt;li&gt;Hash various data including connection or header information&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Custom Load
&lt;ul&gt;
&lt;li&gt;Query the load on individual servers via SNMP&lt;/li&gt;
&lt;li&gt;CPU usage, memory and response time&lt;/li&gt;
&lt;li&gt;Combine to suit their requests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;DNS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DNS adopts &lt;strong&gt;Round Robin&lt;/strong&gt; algorithm to return DNS Lookup response.&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/system-design/scalability/nslookup_google_hu15bd37a2029b33082ba983a1806f93bd_95881_3e02cf999951f569633ab8a8a768a443.png 400w,
               /note/system-design/scalability/nslookup_google_hu15bd37a2029b33082ba983a1806f93bd_95881_1cded85855b11767b478f4e3ec7e18f9.png 760w,
               /note/system-design/scalability/nslookup_google_hu15bd37a2029b33082ba983a1806f93bd_95881_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/system-design/scalability/nslookup_google_hu15bd37a2029b33082ba983a1806f93bd_95881_3e02cf999951f569633ab8a8a768a443.png&#34;
               width=&#34;760&#34;
               height=&#34;473&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;In this lookup search, we can see that multiple times search &lt;code&gt;www.google.com&lt;/code&gt; we can get different IP addresses from DNS servers. It permutes the servers in the list one by one.&lt;/p&gt;
&lt;p&gt;But also, load balancer for DNS attempts to re-order the list to give priority to numerically &amp;ldquo;closer&amp;rdquo; networks according to different locations.&lt;/p&gt;
&lt;h2 id=&#34;caching&#34;&gt;Caching&lt;/h2&gt;
&lt;p&gt;Cache is lightning-fast, and helps record the most frequent data query, request or object. It holds every dataset in RAM and requests are handled as fast as technically possible.&lt;/p&gt;
&lt;h3 id=&#34;the-data-for-caching&#34;&gt;The data for caching&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cached Database Queries&lt;/li&gt;
&lt;li&gt;Cahced Object&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tool&#34;&gt;Tool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://redis.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Advantages
&lt;ul&gt;
&lt;li&gt;Extra database-features like persistence&lt;/li&gt;
&lt;li&gt;Lots of Data Types&lt;/li&gt;
&lt;li&gt;Both clients and servers cache the data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AOF Log(Append Only File)
&lt;ul&gt;
&lt;li&gt;Appending all write operations received by the server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RDB Snapshot
&lt;ul&gt;
&lt;li&gt;Backup file, take a full snapshot of the current Redis state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memcached&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MultiThreaded&lt;/li&gt;
&lt;li&gt;Simplicity, ease of use, easy setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;database&#34;&gt;Database&lt;/h2&gt;
&lt;h3 id=&#34;partitionsharding&#34;&gt;Partition/Sharding&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A horizontal partitioning method&lt;/li&gt;
&lt;li&gt;The data is partitioned accross multiple servers&lt;/li&gt;
&lt;li&gt;Procsessing workload against a large table can be spread&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;replication&#34;&gt;Replication&lt;/h3&gt;
&lt;p&gt;Setting up a separate copy of the data on a different node.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read the database logs&lt;/li&gt;
&lt;li&gt;Each change of the database is replicated to other copies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A replication engine can be used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy to setup&lt;/li&gt;
&lt;li&gt;On-going administration and management&lt;/li&gt;
&lt;li&gt;Additional storage for each replication&lt;/li&gt;
&lt;li&gt;Additional I/O and CPU usage to support the data replication process&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;asynchronism&#34;&gt;Asynchronism&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Maximum Running Time of N Computers</title>
      <link>https://panxycris.github.io/note/leetcode/binary-search/maximum-running-time-of-n-computers/</link>
      <pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/leetcode/binary-search/maximum-running-time-of-n-computers/</guid>
      <description>&lt;h3 id=&#34;problem-description&#34;&gt;Problem description&lt;/h3&gt;
&lt;p&gt;You have &lt;code&gt;n&lt;/code&gt; computers. You are given the integer &lt;code&gt;n&lt;/code&gt; and a &lt;strong&gt;0-indexed&lt;/strong&gt; integer array &lt;code&gt;batteries&lt;/code&gt; where the $i^{th}$ battery can &lt;strong&gt;run&lt;/strong&gt; a computer for &lt;code&gt;batteries[i]&lt;/code&gt; minutes. You are interested in running &lt;strong&gt;all&lt;/strong&gt; &lt;code&gt;n&lt;/code&gt; computers &lt;strong&gt;simultaneously&lt;/strong&gt; using the given batteries.&lt;/p&gt;
&lt;p&gt;Initially, you can insert &lt;strong&gt;at most one battery&lt;/strong&gt; into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery &lt;strong&gt;any number of times&lt;/strong&gt;. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.&lt;/p&gt;
&lt;p&gt;Note that the batteries cannot be recharged.&lt;/p&gt;
&lt;p&gt;Return the &lt;strong&gt;maximum&lt;/strong&gt; number of minutes you can run all the &lt;code&gt;n&lt;/code&gt; computers simultaneously.&lt;/p&gt;
&lt;h3 id=&#34;constraints&#34;&gt;Constraints&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= batteries.length &amp;lt;= &lt;/code&gt;$10^5$&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= batteries[i] &amp;lt;= &lt;/code&gt;$10^9$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;For this kind of problem, we always find it hard to get this extreme value. But if we change a thought, when given the result, can we implement this method? Like in this problem, when given an amount of minutes, can we run all the &lt;code&gt;n&lt;/code&gt; computers simultaneously? When the situation changes, this problem is converted into a binary search problem. We can set a left and right boundary of this amount of minutes, and we use binary search to get the final value of our solution.&lt;/p&gt;
&lt;p&gt;Thus, how can we determine whether we can run &lt;code&gt;n&lt;/code&gt; computers simultaneously when given a special number of minutes? We can set &lt;code&gt;k&lt;/code&gt; as the given number of minutes. And for &lt;code&gt;target&lt;/code&gt; as the summation number of minutes of &lt;code&gt;n&lt;/code&gt; computers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ll long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
ll target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And for each battery, it can only choose its maximum volumne of electricity, so each one choose either its volume or &lt;code&gt;k&lt;/code&gt; number of minutes for running time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;ll res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; battery: batteries){
    res &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; battery &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; battery : k;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; target)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the result reaches the &lt;code&gt;target&lt;/code&gt; number of minutes, it proves that &lt;code&gt;k&lt;/code&gt; number of minutes can fit the solution. All of the code shows like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ll long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    ll maxRunTime(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; batteries) {
        ll sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; battery: batteries)
            sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; battery;
        ll l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;n;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; r){
            ll mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// target value rounds up to an integer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(canFit(n, mid, batteries)){
                l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
            }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; l;
    }
    
    ll &lt;span style=&#34;color:#a6e22e&#34;&gt;canFit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, ll k, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; batteries){
        ll target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k;
        ll res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; battery: batteries){
            res &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; battery &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; battery : k;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; target)
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; target;
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is cited from &lt;a href=&#34;https://leetcode.com/problems/maximum-running-time-of-n-computers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leetcode 2141. Maximum Running Time of N Computers&lt;/a&gt;. And the solution is cited from &lt;a href=&#34;https://leetcode.com/problems/maximum-running-time-of-n-computers/discuss/1692979/Java-Simple-Solution-w.-Explanation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[Java] Simple Solution w. Explanation - Chen-Yiyang&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Design a Leaderboard</title>
      <link>https://panxycris.github.io/note/leetcode/design/design-a-leaderboard/</link>
      <pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/leetcode/design/design-a-leaderboard/</guid>
      <description>&lt;h3 id=&#34;problem-description&#34;&gt;Problem description&lt;/h3&gt;
&lt;p&gt;Design a Leaderboard class, which has 3 functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;addScore(playerId, score)&lt;/code&gt;: Update the leaderboard by adding score to the given player&amp;rsquo;s score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given score.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;top(K)&lt;/code&gt;: Return the score sum of the top K players.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset(playerId)&lt;/code&gt;: Reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). It is guaranteed that the player was added to the leaderboard before calling this function.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Initially, the leaderboard is empty.&lt;/p&gt;
&lt;h3 id=&#34;constraints&#34;&gt;Constraints&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= playerId, K &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s guaranteed that &lt;code&gt;K&lt;/code&gt; is less than or equal to the current number of players.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= score &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There will be at most &lt;code&gt;1000&lt;/code&gt; function calls.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;It is easy to see that we need to have a &lt;strong&gt;map&lt;/strong&gt; to keep a key-value relationship of &lt;code&gt;playerId&lt;/code&gt; and &lt;code&gt;score&lt;/code&gt;. So whether for function &lt;code&gt;addScore(playerId, score)&lt;/code&gt; or &lt;code&gt;reset(playerId)&lt;/code&gt;, we can easily to set or erase(also we can set to 0, but for better performance) the score of each player.&lt;/li&gt;
&lt;li&gt;The core problem is &lt;code&gt;top(K)&lt;/code&gt; function, which requires us to the sum score. Due to the contraints lots of function calls, we need to assure that &lt;code&gt;top(K)&lt;/code&gt; function $\leq O(logn)$ rather than a linear time complexity. This constraint requires us for another data structure of $O(logn)$ to store the scores. In most cases, this data structure needs to be another map for score and player, but multiple scores in this case, so the value of the map needs to be an array, which makes us to design an another data structure to store the index of players in this array(reduce search time complexity). So for the scores, we will have a sorted set to store it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cpp&#34;&gt;Cpp&lt;/h3&gt;
&lt;p&gt;There is a &lt;code&gt;multiset&lt;/code&gt; data structure that can save same values and also is a sorted data structure, which meets our requirements.&lt;/p&gt;
&lt;p&gt;We keep an unordered_map &lt;code&gt;player_score&lt;/code&gt; to save the &lt;code&gt;playerId&lt;/code&gt; and &lt;code&gt;score&lt;/code&gt;. And for a sorted multiset to store the scores.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;unordered_map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; player_score;
multiset&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; scores;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;code&gt;reset(playerId)&lt;/code&gt; function, we set a &lt;code&gt;multiset.find&lt;/code&gt; to get the index of one of this score. And we erase this score and the player.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reset&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; playerId) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scores.find(player_score[playerId]);
    scores.erase(it);
    player_score.erase(playerId);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For remnant part, it is quick and easy to see. Let&amp;rsquo;s show all of it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Leaderboard&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    Leaderboard() {}
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addScore&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; playerId, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; score) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(player_score.find(playerId)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;player_score.end()){
            score &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; player_score[playerId];
            reset(playerId);
        }
        player_score[playerId] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; score;
        scores.insert(score);
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; K) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; it&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;scores.rbegin();K&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;K&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;,it&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum;
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reset&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; playerId) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scores.find(player_score[playerId]);
        scores.erase(it);
        player_score.erase(playerId);
    }
  
&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    unordered_map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; player_score;
    multiset&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; scores;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is cited from &lt;a href=&#34;https://leetcode.com/problems/design-a-leaderboard/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leetcode 1244. Design A Leaderboard&lt;/a&gt;. And the solution is cited from &lt;a href=&#34;https://leetcode.com/problems/design-a-leaderboard/discuss/845866/C%2B%2B-Multiset-%2B-Map-Solution&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mtobeiyf —— C++ Multiset + Map Solution&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Consistency</title>
      <link>https://panxycris.github.io/note/system-design/cap/consistency/</link>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/system-design/cap/consistency/</guid>
      <description>&lt;p&gt;In order to have a consistent data, we always have to synchronize multiple copies of the same data.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Weak Consistency&lt;/th&gt;
&lt;th&gt;Eventual Consistency&lt;/th&gt;
&lt;th&gt;Strong Consistency&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;After a write&lt;/td&gt;
&lt;td&gt;reads may or may not see it&lt;/td&gt;
&lt;td&gt;reads eventually will see it&lt;/td&gt;
&lt;td&gt;reads will see it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scenario&lt;/td&gt;
&lt;td&gt;Real time cases such as VoIP, video chat&lt;/td&gt;
&lt;td&gt;DNS and Email&lt;/td&gt;
&lt;td&gt;Need Transactions system: file systems and RDBMSes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://panxycris.github.io/note/computer-network/application-layer/http/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/computer-network/application-layer/http/</guid>
      <description>&lt;p&gt;In this topic, we introduced a simple history of HTTP evolvation. And we compare the pros and cons of each of them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP Transfer progress&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When TCP connection has already initiated, HTTP begins to be transferred.&lt;/p&gt;
&lt;h3 id=&#34;http-10&#34;&gt;HTTP 1.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Non-persistant HTTP
&lt;ul&gt;
&lt;li&gt;At most one object sent over TCP connection&lt;/li&gt;
&lt;li&gt;Multiple Objects required multiple connections&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Response Time
&lt;ul&gt;
&lt;li&gt;2RTT + file transmission Time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/application-layer/http/HTTP%201.0_hu01d27e33e883dec6028d423bb514d024_160203_da8085695593672e3d7fa21bb46c59fb.png 400w,
               /note/computer-network/application-layer/http/HTTP%201.0_hu01d27e33e883dec6028d423bb514d024_160203_18ce8bc437b682613eca4cf9c6692752.png 760w,
               /note/computer-network/application-layer/http/HTTP%201.0_hu01d27e33e883dec6028d423bb514d024_160203_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/application-layer/http/HTTP%201.0_hu01d27e33e883dec6028d423bb514d024_160203_da8085695593672e3d7fa21bb46c59fb.png&#34;
               width=&#34;760&#34;
               height=&#34;607&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;http-11&#34;&gt;HTTP 1.1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Persistant HTTP
&lt;ul&gt;
&lt;li&gt;Subsequent HTTP messages sent over the open connection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FCFS
&lt;ul&gt;
&lt;li&gt;HOL Blocking Problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/application-layer/http/HTTP%201.1_hudc80dc6d9dfaf95317bfb6566464cea5_293312_e92ad06d71c0978da22628b2bb552e2b.png 400w,
               /note/computer-network/application-layer/http/HTTP%201.1_hudc80dc6d9dfaf95317bfb6566464cea5_293312_ccd1f57a0e1216d0432cf69f8819465b.png 760w,
               /note/computer-network/application-layer/http/HTTP%201.1_hudc80dc6d9dfaf95317bfb6566464cea5_293312_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/application-layer/http/HTTP%201.1_hudc80dc6d9dfaf95317bfb6566464cea5_293312_e92ad06d71c0978da22628b2bb552e2b.png&#34;
               width=&#34;760&#34;
               height=&#34;345&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;http2&#34;&gt;HTTP/2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stream
&lt;ul&gt;
&lt;li&gt;Multiplexed&lt;/li&gt;
&lt;li&gt;Prioritized&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binary Framing Layer
&lt;ul&gt;
&lt;li&gt;A Layer in the application layer&lt;/li&gt;
&lt;li&gt;Help HTTP Multiplexed to the frame, each frame can contain only header or data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/application-layer/http/HTTP%202.0_hu57404a164243915960cb4cf0f15bdb62_321931_5245748c10207e7ee13d9915ee065d84.png 400w,
               /note/computer-network/application-layer/http/HTTP%202.0_hu57404a164243915960cb4cf0f15bdb62_321931_0b0fd9bbd520f9732d3abc4d483596fe.png 760w,
               /note/computer-network/application-layer/http/HTTP%202.0_hu57404a164243915960cb4cf0f15bdb62_321931_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/application-layer/http/HTTP%202.0_hu57404a164243915960cb4cf0f15bdb62_321931_5245748c10207e7ee13d9915ee065d84.png&#34;
               width=&#34;760&#34;
               height=&#34;355&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;http3&#34;&gt;HTTP/3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;QUIC(Quick UDP Internet Congestion)
&lt;ul&gt;
&lt;li&gt;Based on UDP&lt;/li&gt;
&lt;li&gt;Adopts approaches of TCP connection establishment
&lt;ul&gt;
&lt;li&gt;Reliability, congestion control, authentication, encryption&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a comparison of TLS and QUIC&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/application-layer/http/TLS%20vs%20QUIC_hue4a094707c7ff35e578be77688e7bff1_262852_89e4669950369d6dc2931acaaf304a00.png 400w,
               /note/computer-network/application-layer/http/TLS%20vs%20QUIC_hue4a094707c7ff35e578be77688e7bff1_262852_ac9930dbd273e1eba75a8c2d57c8f39c.png 760w,
               /note/computer-network/application-layer/http/TLS%20vs%20QUIC_hue4a094707c7ff35e578be77688e7bff1_262852_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/application-layer/http/TLS%20vs%20QUIC_hue4a094707c7ff35e578be77688e7bff1_262852_89e4669950369d6dc2931acaaf304a00.png&#34;
               width=&#34;760&#34;
               height=&#34;345&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Availability</title>
      <link>https://panxycris.github.io/note/system-design/cap/availability/</link>
      <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/system-design/cap/availability/</guid>
      <description>&lt;p&gt;To support a high availability, there are two complemenrary problems.&lt;/p&gt;
&lt;h3 id=&#34;fail-over&#34;&gt;Fail-Over&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Active-passive&lt;/th&gt;
&lt;th&gt;Active-active&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Entity&lt;/td&gt;
&lt;td&gt;An active server and a passive server&lt;/td&gt;
&lt;td&gt;Two active servers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Running Pattern&lt;/td&gt;
&lt;td&gt;heartbeats are sent between the active and the passive server on standby&lt;/td&gt;
&lt;td&gt;both servers are managing traffic, spreading the load between them.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Feature&lt;/td&gt;
&lt;td&gt;When the heartbeat is interrupted, the passive server takes over the active&amp;rsquo;s IP address and resumes service.&lt;/td&gt;
&lt;td&gt;If the servers are public-facing, the DNS would need to know about the public IPs of both servers. If the servers are internal-facing, application logic would need to know about both servers.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Disadvantage
&lt;ul&gt;
&lt;li&gt;Fail-over adds more hardware and additional complexity.&lt;/li&gt;
&lt;li&gt;There is a potential for loss of data if the active system fails before any newly written data can be replicated to the passive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;replication&#34;&gt;Replication&lt;/h3&gt;
&lt;p&gt;Master-slave vs master-master&lt;/p&gt;
&lt;h3 id=&#34;sequence-vs-parallel&#34;&gt;Sequence vs Parallel&lt;/h3&gt;
&lt;p&gt;For sequence&lt;/p&gt;
&lt;p&gt;$Availability_{Total}= Availability_{Foo} \times Availability_{Bar}$&lt;/p&gt;
&lt;p&gt;If both &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; each had 99.9% availability, their total availability in sequence would be 99.8%.&lt;/p&gt;
&lt;p&gt;For parallel&lt;/p&gt;
&lt;p&gt;$Availability_{Total} = 1 - (1 - Availability_{Foo}) \times (1 - Availability_{Bar})$&lt;/p&gt;
&lt;p&gt;If both &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; each had 99.9% availability, their total availability in parallel would be 99.9999%.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The content is cited from &lt;a href=&#34;https://github.com/donnemartin/system-design-primer#availability-patterns&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;System design primer &amp;ndash; Avalability Patterns&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Randomly pick an element</title>
      <link>https://panxycris.github.io/note/leetcode/design/randomly-pick-an-element/</link>
      <pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/leetcode/design/randomly-pick-an-element/</guid>
      <description>&lt;h3 id=&#34;problem-description&#34;&gt;Problem description&lt;/h3&gt;
&lt;p&gt;Design a data structure, which has 3 functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;add(element)&lt;/code&gt;: Update the data structure by adding an integer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete(element)&lt;/code&gt;: Update the data structure by deleting an integer, if there are lots of integers, just delete one, if this element does not exist, do nothing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getRandom()&lt;/code&gt;: Return an element of the data structure randomly, the probability of each element should be equal.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;constraints&#34;&gt;Constraints&lt;/h3&gt;
&lt;p&gt;3 functions in $O(1)$ time complexity.&lt;/p&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;The difficulty of this problem is $O(1)$ time complexity. Due to multiple same values in this problem, we can design a set that can save same values.&lt;/p&gt;
&lt;h3 id=&#34;cpp&#34;&gt;Cpp&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;unordered_multiset&lt;/code&gt; can be used. Not only for function &lt;code&gt;add(element)&lt;/code&gt;, &lt;code&gt;delete(element)&lt;/code&gt;, we can add and delete the element in $O(1)$ time complexity, but also for function &lt;code&gt;getRandom()&lt;/code&gt;, we can easily use its size to return a value randomly.&lt;/p&gt;
&lt;p&gt;The data strcture is like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;unordered_multiset&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; elements;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;code&gt;delete(element)&lt;/code&gt; function, we can find one of this element and delete it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; element){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elements.find(element);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(it&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;elements.end())
        elements.erase(it);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;code&gt;getRandom()&lt;/code&gt; function, we can use the size of multiset to get a random one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getRandom&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(elements.begin()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;rand()&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;elements.size());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s show all of the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MagicSet&lt;/span&gt;{
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    MagicSet(){}

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; element){
        elements.insert(element);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; element){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elements.find(element);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(it&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;elements.end())
            elements.erase(it);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getRandom&lt;/span&gt;(){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(elements.begin()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;rand()&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;elements.size());
    }

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    unordered_multiset&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; elements;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Cookie</title>
      <link>https://panxycris.github.io/note/computer-network/application-layer/cookie/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/computer-network/application-layer/cookie/</guid>
      <description>&lt;p&gt;Maintain user/server state&lt;/p&gt;
&lt;p&gt;HTTP GET/response is stateless, so in the server, we always create a cookie for each client, so that in following transactions, the server can track the request state of each client.&lt;/p&gt;
&lt;h3 id=&#34;privacy&#34;&gt;Privacy&lt;/h3&gt;
&lt;p&gt;In each website, it always asks for your sancation for the cookies, you can browse a new webpage that you never browsed before to try it.&lt;/p&gt;
&lt;h3 id=&#34;components&#34;&gt;Components&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;cookie header line of HTTP response message&lt;/li&gt;
&lt;li&gt;cookie header line in next HTTP request message&lt;/li&gt;
&lt;li&gt;cookie file kept on user’s host, managed by user’s browser&lt;/li&gt;
&lt;li&gt;back-end database at website&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;what-a-site-creates-for-cookie&#34;&gt;What a site creates for cookie&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;unique ID (aka “cookie”)&lt;/li&gt;
&lt;li&gt;entry in backend database for ID&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;working-process&#34;&gt;Working process&lt;/h3&gt;
&lt;p&gt;Here is a graph to show how a cookie works&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/application-layer/cookie/cookie_hu83ed41a0a1e489b71ddc81a02d3f33fd_410707_848cd33ed4b28c5f923b327be0c9a6c3.png 400w,
               /note/computer-network/application-layer/cookie/cookie_hu83ed41a0a1e489b71ddc81a02d3f33fd_410707_14a8e841a731efe7cb746d44894fa9e3.png 760w,
               /note/computer-network/application-layer/cookie/cookie_hu83ed41a0a1e489b71ddc81a02d3f33fd_410707_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/application-layer/cookie/cookie_hu83ed41a0a1e489b71ddc81a02d3f33fd_410707_848cd33ed4b28c5f923b327be0c9a6c3.png&#34;
               width=&#34;760&#34;
               height=&#34;390&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>CDN</title>
      <link>https://panxycris.github.io/note/computer-network/application-layer/cdn/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/computer-network/application-layer/cdn/</guid>
      <description>&lt;p&gt;Content Delivery Network&lt;/p&gt;
&lt;p&gt;A geographically distributed network of servers and their data centers that help in web content distribution to users with minimal delay.&lt;/p&gt;
&lt;h3 id=&#34;how-does-cdn-work&#34;&gt;How does CDN work&lt;/h3&gt;
&lt;p&gt;CDN works by bringing content closer to the geographic location of the end users.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Located data centers situated around the world&lt;/li&gt;
&lt;li&gt;Within each Points of Presence (PoPs) are thousands of caching servers&lt;/li&gt;
&lt;li&gt;Improve connectivity and accelerate the speed at which content is delivered to the end user.&lt;/li&gt;
&lt;/ul&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/application-layer/cdn/CDN_hu72427bd34d3a2522517a4e3e3a6c312a_208523_f6be9962ab902337089254e013fe4ec7.png 400w,
               /note/computer-network/application-layer/cdn/CDN_hu72427bd34d3a2522517a4e3e3a6c312a_208523_e33e58b2db4126e9a593d4d298e36df8.png 760w,
               /note/computer-network/application-layer/cdn/CDN_hu72427bd34d3a2522517a4e3e3a6c312a_208523_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/application-layer/cdn/CDN_hu72427bd34d3a2522517a4e3e3a6c312a_208523_f6be9962ab902337089254e013fe4ec7.png&#34;
               width=&#34;760&#34;
               height=&#34;510&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;work-process&#34;&gt;Work process&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The user sends a request to the business’ web server to retrieve all the page’s components&lt;/li&gt;
&lt;li&gt;The assets are retrieved from the origin server and once delivered are stored in the PoP edge caching server close to the end user.&lt;/li&gt;
&lt;li&gt;When &lt;strong&gt;the same user&lt;/strong&gt; requests &lt;strong&gt;the same assets&lt;/strong&gt; the next time, the requests don’t go to the origin server. Instead the requests go to the cached files from the &lt;strong&gt;PoP server&lt;/strong&gt; to see if the stored assets are still available and deliver them to the user.
&lt;ul&gt;
&lt;li&gt;If they are not available or the caching server has not cached the assets yet, the request is sent to the origin server again.&lt;/li&gt;
&lt;li&gt;Once your static assets are cached on all the CDN servers for a particular location, all &lt;strong&gt;subsequent website visitor requests&lt;/strong&gt; for static assets will be delivered from these edge servers instead of the origin server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;push-cdn-and-pull-cdn&#34;&gt;Push CDN and Pull CDN&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Push CDN&lt;/th&gt;
&lt;th&gt;Pull CDN&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;feature&lt;/td&gt;
&lt;td&gt;Receive it whenever changes occur&lt;/td&gt;
&lt;td&gt;grad new content when the first user requests the content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Timeliness&lt;/td&gt;
&lt;td&gt;Can configure when content expires and when it is updated&lt;/td&gt;
&lt;td&gt;A TTL determines how long content is cached&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Applicable scene&lt;/td&gt;
&lt;td&gt;Frequently updated, less users requests&lt;/td&gt;
&lt;td&gt;High Traffic, Small download&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;benefits&#34;&gt;Benefits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Faster delivery&lt;/li&gt;
&lt;li&gt;Optimize bandwidth and latency&lt;/li&gt;
&lt;li&gt;Improve website security
&lt;ul&gt;
&lt;li&gt;Offer Distributed Denial of Service or DDoS protection by distributing the malicious requests across the network&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Help control access to different regions
&lt;ul&gt;
&lt;li&gt;Delegate authentication tasks to the edge&lt;/li&gt;
&lt;li&gt;Help in collecting logs and analyzing user-generated data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;disadvantages&#34;&gt;Disadvantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Costs depends on traffic&lt;/li&gt;
&lt;li&gt;Content may be stale if it is updated before TTL expires&lt;/li&gt;
&lt;li&gt;CDNs require changing URLs for static content to point to the CDN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;The content cited from &lt;a href=&#34;https://www.cdnetworks.com/web-performance-blog/how-content-delivery-networks-work/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CDNetworks&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NTP</title>
      <link>https://panxycris.github.io/note/computer-network/application-layer/ntp/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/computer-network/application-layer/ntp/</guid>
      <description>&lt;p&gt;Network Time Protocol&lt;/p&gt;
&lt;p&gt;Provide accurate timing in the network and synchronize routers, hosts,
and other network devices.&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/application-layer/ntp/NTP_hua7755a23f74aece6fdce52eaa24c39e2_482807_7381ff6a14250fb747cdc49cbe538ba5.png 400w,
               /note/computer-network/application-layer/ntp/NTP_hua7755a23f74aece6fdce52eaa24c39e2_482807_c0c5b13157dd188e87553eeeb646b006.png 760w,
               /note/computer-network/application-layer/ntp/NTP_hua7755a23f74aece6fdce52eaa24c39e2_482807_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/application-layer/ntp/NTP_hua7755a23f74aece6fdce52eaa24c39e2_482807_7381ff6a14250fb747cdc49cbe538ba5.png&#34;
               width=&#34;760&#34;
               height=&#34;394&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;structure&#34;&gt;Structure&lt;/h3&gt;
&lt;p&gt;NTP timing service uses a hierarchical architecture organized into 16 stratums&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An NTP primary server, or stratum-1, is synchronized with a high precision clock&lt;/li&gt;
&lt;li&gt;At least 175,000 hosts running NTP in the Internet&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operation-mode&#34;&gt;Operation Mode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clients and servers can operate in the multicast or broadcast mode.&lt;/li&gt;
&lt;li&gt;NTP client synchronize with a server in two ways
&lt;ul&gt;
&lt;li&gt;Query time information from and synchronize to a remote NTP server, use &lt;strong&gt;rdate&lt;/strong&gt; or &lt;strong&gt;ntpdate&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Synchronize with a remote server continuously and automatically, use &lt;strong&gt;ntpd&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>SNMP</title>
      <link>https://panxycris.github.io/note/computer-network/application-layer/snmp/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/computer-network/application-layer/snmp/</guid>
      <description>&lt;p&gt;Simple Network Management Protocol&lt;/p&gt;
&lt;p&gt;Exchange management information between network devices&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each Managed Device, a host or a router, maintains a number of &lt;strong&gt;Management Information Bases (MIBs)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Each managed device has an &lt;strong&gt;SNMP Agent&lt;/strong&gt; to provide interface between MIBs and an SNMP Manager&lt;/li&gt;
&lt;li&gt;An SNMP manager, usually implemented in &lt;strong&gt;Network Management System (NMS)&lt;/strong&gt;, can work with multiple SNMP agents&lt;/li&gt;
&lt;li&gt;Uses well-known &lt;strong&gt;UDP&lt;/strong&gt; port number 161/162 at the agent/manager&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;snmp-message-format&#34;&gt;SNMP Message Format&lt;/h3&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/application-layer/snmp/SNMP%20Message%20Format_hu92bcf277dfefb76a8ebe9b8a12c2ba91_76854_fdca34bb588e4ca38831f402230e13b7.png 400w,
               /note/computer-network/application-layer/snmp/SNMP%20Message%20Format_hu92bcf277dfefb76a8ebe9b8a12c2ba91_76854_cdd1e9477b9ecc174003a4a77e40ff1a.png 760w,
               /note/computer-network/application-layer/snmp/SNMP%20Message%20Format_hu92bcf277dfefb76a8ebe9b8a12c2ba91_76854_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/application-layer/snmp/SNMP%20Message%20Format_hu92bcf277dfefb76a8ebe9b8a12c2ba91_76854_fdca34bb588e4ca38831f402230e13b7.png&#34;
               width=&#34;760&#34;
               height=&#34;223&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Community Name
&lt;ul&gt;
&lt;li&gt;Access scope for SNMP managers and agents&lt;/li&gt;
&lt;li&gt;A different community name will be discarded&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocol Data Unit (PDU) Type specifies the SNMP message type&lt;/li&gt;
&lt;li&gt;Request ID: match an SNMP request with the corresponding response&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mib-management-information-bases&#34;&gt;MIB (Management Information Bases)&lt;/h3&gt;
&lt;p&gt;A managed device maintains a large number of SNMP objects to store management information. The Structure of Management Information (SMI) defines the rules for describing management information and the data types used in SNMP.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tree Structure
&lt;ul&gt;
&lt;li&gt;Each level of the tree consists of groups&lt;/li&gt;
&lt;li&gt;Each group has its name and the associated numerical identifier&lt;/li&gt;
&lt;li&gt;Leaves in the mib-2 subtree are MIB objects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example for MIB Tree Structure:&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/application-layer/snmp/MIB_hu19b8396c353a12fd7220e3112328ffb3_187982_f93a20ac91a6c368e02a5a8bf6e2506e.png 400w,
               /note/computer-network/application-layer/snmp/MIB_hu19b8396c353a12fd7220e3112328ffb3_187982_77ff4fd5d622d2fabb122677d8f4661f.png 760w,
               /note/computer-network/application-layer/snmp/MIB_hu19b8396c353a12fd7220e3112328ffb3_187982_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/application-layer/snmp/MIB_hu19b8396c353a12fd7220e3112328ffb3_187982_f93a20ac91a6c368e02a5a8bf6e2506e.png&#34;
               width=&#34;760&#34;
               height=&#34;497&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;The leaf &lt;em&gt;tcpMaxConn&lt;/em&gt; can be defined as &lt;strong&gt;1.3.6.1.2.1.6.4&lt;/strong&gt; or &lt;strong&gt;iso.org.dod.internet.mgmt.mib-2.tcp.tcpMaxConn&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Minimum Swaps to Group All 1&#39;s Together</title>
      <link>https://panxycris.github.io/note/leetcode/sliding-window/minimum-swaps-to-group-all-1s-together/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/leetcode/sliding-window/minimum-swaps-to-group-all-1s-together/</guid>
      <description>&lt;h3 id=&#34;problem-description&#34;&gt;Problem description&lt;/h3&gt;
&lt;p&gt;Given a binary array &lt;code&gt;data&lt;/code&gt;, return the minimum number of swaps required to group all 1’s present in the array together in &lt;strong&gt;any place&lt;/strong&gt; in the array.&lt;/p&gt;
&lt;h3 id=&#34;constraints&#34;&gt;Constraints&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;$1 \leq$ &lt;code&gt;data.length&lt;/code&gt; $ \leq 10^5$&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data[i]&lt;/code&gt; is either &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;This problem asks us to return minimum number of swaps, which means that we do not need to take real swap actions for given array. And we can find that the value in this array is either &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; within the constraints, so we could keep a sliding window of the length that is equal to the number of &lt;code&gt;1&lt;/code&gt; in the array.&lt;/p&gt;
&lt;p&gt;$Len_{window} = Num_{1}$&lt;/p&gt;
&lt;p&gt;In this way, for those positions of value &lt;code&gt;0&lt;/code&gt;, which means that we could swap them with &lt;code&gt;1&lt;/code&gt;, so this problems turns to that we need to find a sliding window with minimum number of &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can set two pointers of left and right boundary to control this sliding window.&lt;/p&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; minSwaps(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; data) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ones &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data.size();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, max_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num:data) &lt;span style=&#34;color:#75715e&#34;&gt;// get the sum of the number of 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ones &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; num;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n){
            cnt_one &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; data[right&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;];
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ones){ &lt;span style=&#34;color:#75715e&#34;&gt;// maintain the length of the window to ones
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                cnt_one &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; data[left&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;];
            }
            max_one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_one, cnt_one);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ones &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; max_one;
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is cited from &lt;a href=&#34;https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leetcode 1151. Minimum Swaps to Group All 1&amp;rsquo;s Together&lt;/a&gt;. And the solution is cited from &lt;a href=&#34;https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together/solution/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LeetCode Official Solution Approach 1: Sliding Window with Two Pointers&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP</title>
      <link>https://panxycris.github.io/note/computer-network/transport-layer/tcp/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/computer-network/transport-layer/tcp/</guid>
      <description>&lt;p&gt;Transport Control Protocol&lt;/p&gt;
&lt;h3 id=&#34;feature&#34;&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Connection-oriented, reliable&lt;/li&gt;
&lt;li&gt;Unicast only&lt;/li&gt;
&lt;li&gt;Stream oriented&lt;/li&gt;
&lt;li&gt;Error Control, Flow Control, Congestion Control&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-header&#34;&gt;TCP Header&lt;/h3&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/transport-layer/tcp/TCP%20Header_hua3d9dce47e5b42c0179df68bbfbdba33_46648_2c07b13bfee7ff6f325ab01a8c9f1462.png 400w,
               /note/computer-network/transport-layer/tcp/TCP%20Header_hua3d9dce47e5b42c0179df68bbfbdba33_46648_021ca28d9a382ac97fa54c0808fe751d.png 760w,
               /note/computer-network/transport-layer/tcp/TCP%20Header_hua3d9dce47e5b42c0179df68bbfbdba33_46648_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/transport-layer/tcp/TCP%20Header_hua3d9dce47e5b42c0179df68bbfbdba33_46648_2c07b13bfee7ff6f325ab01a8c9f1462.png&#34;
               width=&#34;570&#34;
               height=&#34;298&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Sequence number: Identifies the byte in the stream of data from the sending TCP to the receiving TCP that the first byte of data in this segment represents(offset)&lt;/li&gt;
&lt;li&gt;Acknowledgement Number: The next sequence number that the host wants to receive&lt;/li&gt;
&lt;li&gt;Flags
&lt;ul&gt;
&lt;li&gt;URG: an urgent message is being carried.&lt;/li&gt;
&lt;li&gt;ACK: the acknowledgment number is valid.&lt;/li&gt;
&lt;li&gt;PSH: a notification from the sender to the receiver that it should pass all the data received to the application as soon as possible.&lt;/li&gt;
&lt;li&gt;RST: signals a request to reset the TCP connection.&lt;/li&gt;
&lt;li&gt;SYN: set when initiating a connection.&lt;/li&gt;
&lt;li&gt;FIN: set to terminate a connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-connection&#34;&gt;TCP Connection&lt;/h3&gt;
&lt;h4 id=&#34;establishment&#34;&gt;Establishment&lt;/h4&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/transport-layer/tcp/TCP%20Establishment_hu66203eec0205b708c60acc647ae66ee5_47122_bc4e972b1f0574fe14e6437bda0603f8.png 400w,
               /note/computer-network/transport-layer/tcp/TCP%20Establishment_hu66203eec0205b708c60acc647ae66ee5_47122_43c1c87887aa0f2ce22067d1f502d470.png 760w,
               /note/computer-network/transport-layer/tcp/TCP%20Establishment_hu66203eec0205b708c60acc647ae66ee5_47122_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/transport-layer/tcp/TCP%20Establishment_hu66203eec0205b708c60acc647ae66ee5_47122_bc4e972b1f0574fe14e6437bda0603f8.png&#34;
               width=&#34;562&#34;
               height=&#34;478&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;termination&#34;&gt;Termination&lt;/h4&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/transport-layer/tcp/TCP%20Termination_hu032c00bd0e2850496a99e3cfa1605c5e_78513_c32abfc067aae8e1b4fe109ae7b6e521.png 400w,
               /note/computer-network/transport-layer/tcp/TCP%20Termination_hu032c00bd0e2850496a99e3cfa1605c5e_78513_0017411ffa4453d86fd6c218f1ee9a3a.png 760w,
               /note/computer-network/transport-layer/tcp/TCP%20Termination_hu032c00bd0e2850496a99e3cfa1605c5e_78513_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/transport-layer/tcp/TCP%20Termination_hu032c00bd0e2850496a99e3cfa1605c5e_78513_c32abfc067aae8e1b4fe109ae7b6e521.png&#34;
               width=&#34;554&#34;
               height=&#34;536&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;error-control&#34;&gt;Error Control&lt;/h3&gt;
&lt;p&gt;Each data byte has a unique sequence number. The receiver uses &lt;strong&gt;cumulative acknowledgments&lt;/strong&gt;(by default) to inform the sender of the last correctly received byte &lt;strong&gt;in order&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Error detection is performed in each layer of the TCP/IP stack by means of header checksums, and errored packets are dropped.&lt;/p&gt;
&lt;h4 id=&#34;selective-acknowledgment-sack&#34;&gt;Selective acknowledgment (SACK)&lt;/h4&gt;
&lt;p&gt;SACK is used to report multiple lost segments. The receiver uses the TCP SACK option to acknowledge all segments that has been successfully received in the last window of segments, and the sender can retransmit more than one lost segment at a time.&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/transport-layer/tcp/SACK_hu8c5fb22782cc185c16bdd144bbae0fd8_41653_e3badf4c1f5caafc3e79b78ba4787a71.png 400w,
               /note/computer-network/transport-layer/tcp/SACK_hu8c5fb22782cc185c16bdd144bbae0fd8_41653_975245b4ed155834b59a768a6ca47857.png 760w,
               /note/computer-network/transport-layer/tcp/SACK_hu8c5fb22782cc185c16bdd144bbae0fd8_41653_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/transport-layer/tcp/SACK_hu8c5fb22782cc185c16bdd144bbae0fd8_41653_e3badf4c1f5caafc3e79b78ba4787a71.png&#34;
               width=&#34;582&#34;
               height=&#34;215&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;In this example, left edge of SACK is seq=1126009, which means that seq = 1126009 is received, but seq = 1126009-1448 = 1124561 is lost, so the sender will retransmit this datagram.&lt;/p&gt;
&lt;h4 id=&#34;retransmisson-timer&#34;&gt;Retransmisson Timer&lt;/h4&gt;
&lt;p&gt;TCP will also set a Timer to measure whether the sended message will be received. If no ack received when the timer expires, this segment will be retransmitted.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Timer value should be larger than but of the same order of magnitude as a measurement of the &lt;strong&gt;Round Trip Time (RTT)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;TCP continuously measure the RTT and updates the retransmission timer value, defined as &lt;strong&gt;Retransmission TimeOut (RTO)&lt;/strong&gt;, dynamically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;interactive-data-flow&#34;&gt;Interactive data flow&lt;/h3&gt;
&lt;p&gt;TCP supports interactive data flow for interactive user applications, such as &lt;strong&gt;telnet&lt;/strong&gt; and &lt;strong&gt;ssh&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To reduce the number of small segments to be more efficient:&lt;/p&gt;
&lt;h4 id=&#34;delayed-ack&#34;&gt;Delayed ACK&lt;/h4&gt;
&lt;p&gt;Set a Timer: goes off every K ms. Send all acks every K ms.&lt;/p&gt;
&lt;h4 id=&#34;nagle-algorithm&#34;&gt;Nagle Algorithm&lt;/h4&gt;
&lt;p&gt;Set a Window: when reach MSS, all buffered bytes are sent in a single segment.&lt;/p&gt;
&lt;h3 id=&#34;congestion-control&#34;&gt;Congestion Control&lt;/h3&gt;
&lt;p&gt;Sliding window buffer for both sender(cwnd) and receiver(awnd/rwnd).&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/transport-layer/tcp/Congestion%20Sliding%20Window_hu8dfc25bd627be4d083284fd8d528f796_60626_fb7f10ac7835f50a8ff845a6e9d3b41b.png 400w,
               /note/computer-network/transport-layer/tcp/Congestion%20Sliding%20Window_hu8dfc25bd627be4d083284fd8d528f796_60626_d581b52facff6eb51bdb4eddc434f30e.png 760w,
               /note/computer-network/transport-layer/tcp/Congestion%20Sliding%20Window_hu8dfc25bd627be4d083284fd8d528f796_60626_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/transport-layer/tcp/Congestion%20Sliding%20Window_hu8dfc25bd627be4d083284fd8d528f796_60626_fb7f10ac7835f50a8ff845a6e9d3b41b.png&#34;
               width=&#34;760&#34;
               height=&#34;282&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;For sender:&lt;/p&gt;
&lt;p&gt;Here is a graph to show that the process of congestion control:&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/transport-layer/tcp/Congestion%20Control_huaa8940d965e19db238c3014e96b6d1fc_93525_529b12dc80022e7085c9d23393d141ea.png 400w,
               /note/computer-network/transport-layer/tcp/Congestion%20Control_huaa8940d965e19db238c3014e96b6d1fc_93525_bdecdcaa9c881596960913c5e3ce02dc.png 760w,
               /note/computer-network/transport-layer/tcp/Congestion%20Control_huaa8940d965e19db238c3014e96b6d1fc_93525_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/transport-layer/tcp/Congestion%20Control_huaa8940d965e19db238c3014e96b6d1fc_93525_529b12dc80022e7085c9d23393d141ea.png&#34;
               width=&#34;760&#34;
               height=&#34;578&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;Serveral phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Slow Start(cwnd $\leq$ ssthresh):
&lt;ul&gt;
&lt;li&gt;cwnd = cwnd + segsize(= MSS), when receives an ACK&lt;/li&gt;
&lt;li&gt;Exponentially increases&lt;/li&gt;
&lt;li&gt;When timeout, it enters this phase again&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Congestion Avoidance(cwnd &amp;gt; ssthresh):
&lt;ul&gt;
&lt;li&gt;cwnd = cwnd + segsize x segsize / cwnd + segsize / 8&lt;/li&gt;
&lt;li&gt;Linearly increases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fast Recovery(Three duplicate ACKs are received)
&lt;ul&gt;
&lt;li&gt;ssthresh = max [ 2 segsize, min (cwnd, awnd)/2 ]&lt;/li&gt;
&lt;li&gt;Retransmit a segment if allowed by the window size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For receiver:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Event&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;In-order segment, already ACKed&lt;/td&gt;
&lt;td&gt;delayed ACK, wait up to 500ms for another segment, if not, send ACK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;In-order segment, ACK pending&lt;/td&gt;
&lt;td&gt;Immediately send single cumulative ACK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Out-of-order, Gap detected&lt;/td&gt;
&lt;td&gt;Immediately send &lt;strong&gt;duplicate ACK&lt;/strong&gt;, indicating next expected ACK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Partially or completely fills gap&lt;/td&gt;
&lt;td&gt;Immediately send ACK, provided that segment starts at lower end of gap&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>UDP</title>
      <link>https://panxycris.github.io/note/computer-network/transport-layer/udp/</link>
      <pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/computer-network/transport-layer/udp/</guid>
      <description>&lt;p&gt;User Datagram Protocol&lt;/p&gt;
&lt;h3 id=&#34;feature&#34;&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Connectionless, unreliable&lt;/li&gt;
&lt;li&gt;Unicast and multicast&lt;/li&gt;
&lt;li&gt;Datagram oriented&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp-format&#34;&gt;UDP Format&lt;/h3&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/transport-layer/udp/UDP%20Format_hu89ef0a656cae8465cce5751e160b22d8_91531_a0209e157267e9a5b6824c52eb84ec10.png 400w,
               /note/computer-network/transport-layer/udp/UDP%20Format_hu89ef0a656cae8465cce5751e160b22d8_91531_c9fba1d2bbe2e46e2198a1208a02388d.png 760w,
               /note/computer-network/transport-layer/udp/UDP%20Format_hu89ef0a656cae8465cce5751e160b22d8_91531_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/transport-layer/udp/UDP%20Format_hu89ef0a656cae8465cce5751e160b22d8_91531_a0209e157267e9a5b6824c52eb84ec10.png&#34;
               width=&#34;760&#34;
               height=&#34;283&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Port numbers
&lt;ul&gt;
&lt;li&gt;Identify sending and receiving applications (processes). The maximum value for a port number is 216-1= 65535&lt;/li&gt;
&lt;li&gt;1-1023: Well-known, used by servers, fixed&lt;/li&gt;
&lt;li&gt;1024-49151: Registered, used by ordinary user processes&lt;/li&gt;
&lt;li&gt;$&amp;gt;$49151: Dynamic/private, used by clients, randomly picked&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>DHCP</title>
      <link>https://panxycris.github.io/note/computer-network/network-layer/dhcp/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/computer-network/network-layer/dhcp/</guid>
      <description>&lt;p&gt;Dynamic Host Configuration Protocol&lt;/p&gt;
&lt;p&gt;Designed to dynamically configure TCP/IP hosts in a centralized manner from DHCP server.&lt;/p&gt;
&lt;h3 id=&#34;function&#34;&gt;Function&lt;/h3&gt;
&lt;p&gt;Configure parameters in a subnet dynamically&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP Address, Subnet mask, default gateway IP address&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;process&#34;&gt;Process&lt;/h3&gt;
&lt;p&gt;Here is a graph to show how DHCP works&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/network-layer/dhcp/DHCP_hud663d6abf2db500a1190a4428fea0580_117949_62f11cfb055590a9986be2bc638fa04c.png 400w,
               /note/computer-network/network-layer/dhcp/DHCP_hud663d6abf2db500a1190a4428fea0580_117949_f596218a4de3dbc80db3c8b32e1b6790.png 760w,
               /note/computer-network/network-layer/dhcp/DHCP_hud663d6abf2db500a1190a4428fea0580_117949_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/network-layer/dhcp/DHCP_hud663d6abf2db500a1190a4428fea0580_117949_62f11cfb055590a9986be2bc638fa04c.png&#34;
               width=&#34;760&#34;
               height=&#34;224&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A client first broadcasts a &lt;strong&gt;DHCP DISCOVERY&lt;/strong&gt; message on its local physical network&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The message has 0.0.0.0 as the source IP address&lt;/li&gt;
&lt;li&gt;The message may be forwarded by relay agents to servers in other physical networks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each server may respond with a &lt;strong&gt;DHCPOFFER&lt;/strong&gt; message with an available network
address in the Your IP Address field&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The client may receives more than one DHCPOFFER messages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It chooses one server from all responding servers based on the offered IP address and the lease duration.&lt;/li&gt;
&lt;li&gt;The client then broadcasts a &lt;strong&gt;DHCPREQUEST&lt;/strong&gt; message with the Server Identifier option to indicated the selected server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the DHCPREQUEST message is received, only the chosen server responds with a &lt;strong&gt;DHCPACK&lt;/strong&gt; message carrying a full set of configuration parameters to the client.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the client receives, it checks the parameters and configures its TCP/IP modules using the parameters.&lt;/li&gt;
&lt;li&gt;The message specifies the duration of the lease. When the lease expires, the client may ask the server to renew it. Otherwise, the address will be put back in the pool or assigned to other hosts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(When two DHCP servers are used) The client may send a &lt;strong&gt;DHCPRELEASE&lt;/strong&gt; message to the server to relinquish the lease on the network address.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;dhcp-message-format&#34;&gt;DHCP Message Format&lt;/h3&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/network-layer/dhcp/DHCP%20Header_hu5b7cc96fd4b093541ae6f5cf3addd6af_198894_78319e4a0bde2ccf8ebd11df2ecce3b5.png 400w,
               /note/computer-network/network-layer/dhcp/DHCP%20Header_hu5b7cc96fd4b093541ae6f5cf3addd6af_198894_8e2eb6984baecf2576134675c18e31c6.png 760w,
               /note/computer-network/network-layer/dhcp/DHCP%20Header_hu5b7cc96fd4b093541ae6f5cf3addd6af_198894_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/network-layer/dhcp/DHCP%20Header_hu5b7cc96fd4b093541ae6f5cf3addd6af_198894_78319e4a0bde2ccf8ebd11df2ecce3b5.png&#34;
               width=&#34;760&#34;
               height=&#34;472&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Opcode: 1 – a boot request from client; 2 – a boot reply from server&lt;/li&gt;
&lt;li&gt;Hardware Address Type
&lt;ul&gt;
&lt;li&gt;The value is 1 for an Ethernet MAC address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hop count
&lt;ul&gt;
&lt;li&gt;Optionally used by relay agents&lt;/li&gt;
&lt;li&gt;A DHCP relay agent is a host or router that forwards DHCP messages between
DHCP clients and servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transaction ID
&lt;ul&gt;
&lt;li&gt;Randomly assigned to link requests and replies between a client and a server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client HW address
&lt;ul&gt;
&lt;li&gt;The hardware address of the client&lt;/li&gt;
&lt;li&gt;For an Ethernet address, the first 6 bytes are filled and the remaining bytes are set to 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server hostname: Hostname of the DHCP server&lt;/li&gt;
&lt;li&gt;Boot filename
&lt;ul&gt;
&lt;li&gt;Use in a DHCPOFFER message to specify the fully qualified, null
terminated path name of a file to bootstrap from&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dhcp-relay-information-option&#34;&gt;DHCP Relay Information Option&lt;/h3&gt;
&lt;p&gt;Assign IP address based on its location. DHCP client in a Residential Gateway (RG) will send a DHCP request to an ISP Broadband Network Gateway. A network access node, such as an IP DSLAM, aggregates traffic from many users.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Network Translator</title>
      <link>https://panxycris.github.io/note/computer-network/network-layer/network-translator/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/note/computer-network/network-layer/network-translator/</guid>
      <description>&lt;p&gt;Network Address and Port Address Translator&lt;/p&gt;
&lt;h3 id=&#34;nat&#34;&gt;NAT&lt;/h3&gt;
&lt;p&gt;Network Address Translator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mapping one set of IP addresses (usually private) to another set of IP
addresses (usually public).&lt;/li&gt;
&lt;li&gt;Used for
&lt;ul&gt;
&lt;li&gt;Reuse IP address: Share a small pool of IP addresses with a large number of hosts&lt;/li&gt;
&lt;li&gt;Security: internal network is invisible to the outside&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pat&#34;&gt;PAT&lt;/h3&gt;
&lt;p&gt;Port Address Translator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Translate transport identifiers
&lt;ul&gt;
&lt;li&gt;TCP and UDP port numbers, ICMP query identifiers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;Here is an example that shows how NAT and PAT works:&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /note/computer-network/network-layer/network-translator/NAT_hu4ff8046c06eb34f39266bd8704a793e2_442149_70f402d2291b72a7a215851d7a66c232.png 400w,
               /note/computer-network/network-layer/network-translator/NAT_hu4ff8046c06eb34f39266bd8704a793e2_442149_92c78ad351796b7a0fdc935a01920553.png 760w,
               /note/computer-network/network-layer/network-translator/NAT_hu4ff8046c06eb34f39266bd8704a793e2_442149_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://panxycris.github.io/note/computer-network/network-layer/network-translator/NAT_hu4ff8046c06eb34f39266bd8704a793e2_442149_70f402d2291b72a7a215851d7a66c232.png&#34;
               width=&#34;760&#34;
               height=&#34;387&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>WhaleWord</title>
      <link>https://panxycris.github.io/project/whaleword/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://panxycris.github.io/project/whaleword/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An Android App that recites GRE vocabulary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It helps the customers manage words and scientifically makes a study plan according to The Ebbinghaus Forgetting Curve.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is a coursework for Human-Computer Interaction Systems. And I completed the part of making the study plans.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>IPNET</title>
      <link>https://panxycris.github.io/project/ipnet/</link>
      <pubDate>Sat, 03 Nov 2018 18:33:07 +0800</pubDate>
      <guid>https://panxycris.github.io/project/ipnet/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;A platform for patent trading based on blockchain.&lt;/li&gt;
&lt;li&gt;The blockchain data structure based on &lt;strong&gt;Hyperledger&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Services including patent trading, patent loan and insurance&lt;/li&gt;
&lt;li&gt;Users including buyers, buyees, banks, insurance companies, patent legacies and government&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Developed the back end with Springboot and MySql.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>UTag</title>
      <link>https://panxycris.github.io/project/utag/</link>
      <pubDate>Sun, 24 Jun 2018 18:54:05 +0800</pubDate>
      <guid>https://panxycris.github.io/project/utag/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;A platform for data annotation labeling.&lt;/li&gt;
&lt;li&gt;The data annotation requester publishes images and videos on the platform, and the platform automatically labels, and then sends the lower recognition rate data to the workers to label.&lt;/li&gt;
&lt;li&gt;It is a coursework for Software Engineering and Computing III. And I completed front-end and optimize the recognition algorithm.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
