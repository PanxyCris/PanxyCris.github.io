[{"authors":["admin"],"categories":null,"content":"I am a graduate student of computer engineering at New York University. I love computer core technology like computer network and back-end development design, also I keep focusing on Internet industry process and learning new and interesting technology. Currently I am also a TA of course Spring 2022 ECE-GY 6913 Computing Systems Architecture.\nBesides, I am also pursuing a master degree of Financial Engineering at Worldquant University, which is an online degree. I believe that my experience in coding will help me learn better at financial field.\nIf you are interested to connect with me, you can connect at my Linkedin link or email to meüëè!\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1631666810,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://panxycris.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a graduate student of computer engineering at New York University. I love computer core technology like computer network and back-end development design, also I keep focusing on Internet industry process and learning new and interesting technology. Currently I am also a TA of course Spring 2022 ECE-GY 6913 Computing Systems Architecture.\nBesides, I am also pursuing a master degree of Financial Engineering at Worldquant University, which is an online degree.","tags":null,"title":"Xingyu Pan","type":"authors"},{"authors":null,"categories":null,"content":"Topics  Binary Search A method in Time complexity of $O(nlogn)$   Design Design a data structure to deal with the data, usually with special algorithm complexity.   Sliding Window Set left and right boundary of a window to control the variables   ","date":1638835200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1638835200,"objectID":"a0df61517a4271b7a70501b5f70b22de","permalink":"https://panxycris.github.io/note/leetcode/","publishdate":"2021-12-07T00:00:00Z","relpermalink":"/note/leetcode/","section":"note","summary":"Different types of problems and solutions from Leetcode.","tags":null,"title":"Leetcode","type":"book"},{"authors":null,"categories":null,"content":"Topics  Scalability Handle an amount of work that resources can be added to the system.   CAP Three attributes support a distributed system.   ","date":1638835200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1638835200,"objectID":"2a0808b8a4564248b728a586e1b71270","permalink":"https://panxycris.github.io/note/system-design/","publishdate":"2021-12-07T00:00:00Z","relpermalink":"/note/system-design/","section":"note","summary":"Some notes of large-scale web development system design.","tags":null,"title":"üìä System Design","type":"book"},{"authors":null,"categories":null,"content":"Topics According to seven-layer model, summerizes part of important knowledge of some important layers about various protocols.\n Application Layer An abstraction layer that specifies the shared communications protocols and interface methods used by hosts.   Transport Layer Provide host-to-host communication services for applications.   Network Layer A layer for packet forwarding including routing through intermediate routers.   Multicast One-to-many or many-to-many communications   Statement Lots of content is cited from Course NYU Tandon ECE-GY 6353 INTERNET ARCHITECTURE \u0026amp; PROTOCOLS. And some of content is cited from technical blogs and also will be noted at the end of article.\n","date":1639094400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1639094400,"objectID":"3d2a74265b70e6fd83970b39cbdf9d8f","permalink":"https://panxycris.github.io/note/computer-network/","publishdate":"2021-12-10T00:00:00Z","relpermalink":"/note/computer-network/","section":"note","summary":"Protocols of seven layers and relative communication and security technology about it.","tags":null,"title":"Computer Network","type":"book"},{"authors":null,"categories":null,"content":"A method in Time complexity of $O(nlogn)$\nIntroduction  Due to the time complexity of binary search is $O(nlogn)$ , which greatly improves the efficiency of algorithm, it appears in the problems frequently. The data always keeps some sequence, like the number order.  Situation The data sequence always have a special order, like number: 1, 2, 3\u0026hellip;ÔºàSo we can choose either left or right part to find the targetÔºâ\nTime complexity $O(nlogn)$\n Maximum Running Time of N Computers  ","date":1638835200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1638835200,"objectID":"2f42443a0348b28abc4eb89592213ac9","permalink":"https://panxycris.github.io/note/leetcode/binary-search/","publishdate":"2021-12-07T00:00:00Z","relpermalink":"/note/leetcode/binary-search/","section":"note","summary":"A method in Time complexity of $O(nlogn)$\n","tags":null,"title":"Binary Search","type":"book"},{"authors":null,"categories":null,"content":"Three attributes support a distributed system.\nIn a general case, we can only support two of the attributes of a system at most:\n Consistency: Every read receives the most recent write or an error. Availability: Every request receives a response, without guarantee that it contains the most recent version of the information. Partition Tolerent: The system continues to operate despite arbitrary partitioning due to network failures.  However, the networks are unreliable. So in order to keep the system could continuously operate on a network system, we have to support the partiton tolerance to assure that sufficient individual system can operate while another one fails. We have a make a trade-off between Consistency and Availability.\nCP(Consistency and Partition Tolerance) Waiting for a response might have a timeout error. If the businesss needs require atomic reads and writes, CP is a good choice.\nAP(Availability and Partition Tolerance) Responses return the most readily available version of the data available on the node, which might not be the latest. Writes might take some time to propagate when the partition is resolved.\n","date":1643068800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1643068800,"objectID":"c17f2b5d7221a174bc35638bb3622b46","permalink":"https://panxycris.github.io/note/system-design/cap/","publishdate":"2022-01-25T00:00:00Z","relpermalink":"/note/system-design/cap/","section":"note","summary":"Three attributes support a distributed system.\n","tags":null,"title":"CAP","type":"book"},{"authors":null,"categories":null,"content":"Design a data structure to deal with the data, usually with special algorithm complexity.\nIntroduction This sort of problems always require us to set a part of data structures to deal with the data. We usually uses like array, map, set, stack, queue\u0026hellip;\u0026hellip; to meet our design requirements. In most cases we always need to assure better time complexity so that we need to have more varieties of data structures. Here I will list several problems of this field.\n Design a Leaderboard   Randomly pick an element  ","date":1640822400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1640822400,"objectID":"b0eed3e97c1f6c62aefed7285d9403fa","permalink":"https://panxycris.github.io/note/leetcode/design/","publishdate":"2021-12-30T00:00:00Z","relpermalink":"/note/leetcode/design/","section":"note","summary":"Design a data structure to deal with the data, usually with special algorithm complexity.\n","tags":null,"title":"Design","type":"book"},{"authors":null,"categories":null,"content":"An abstraction layer that specifies the shared communications protocols and interface methods used by hosts.\n HTTP In this topic, we introduced a simple history of HTTP evolvation. And we compare the pros and cons of each of them.   Cookie Maintain user/server state   CDN Content Delivery Network   NTP Network Time Protocol   SNMP Simple Network Management Protocol  ","date":1639094400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1639094400,"objectID":"2633a55c25d5129bcfc724bcbb219a87","permalink":"https://panxycris.github.io/note/computer-network/application-layer/","publishdate":"2021-12-10T00:00:00Z","relpermalink":"/note/computer-network/application-layer/","section":"note","summary":"An abstraction layer that specifies the shared communications protocols and interface methods used by hosts.\n","tags":null,"title":"Application Layer","type":"book"},{"authors":null,"categories":null,"content":"Set left and right boundary of a window to control the variables\nIntroduction This sort of problem requires us to set a window with left and right boundary to keep relative variables constant or compare the value of left and right index. Sometimes left and right boundary of this window keeps same direction from 0 $\\rightarrow$ n-1, sometimes left and right boundary with from 0, n-1 to meet together.\nTime Complexity $O(n)$\n Minimum Swaps to Group All 1\u0026#39;s Together  ","date":1641859200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1641859200,"objectID":"f59b326e5d3192974397fd0e815a0d7a","permalink":"https://panxycris.github.io/note/leetcode/sliding-window/","publishdate":"2022-01-11T00:00:00Z","relpermalink":"/note/leetcode/sliding-window/","section":"note","summary":"Set left and right boundary of a window to control the variables\n","tags":null,"title":"Sliding Window","type":"book"},{"authors":null,"categories":null,"content":"Provide host-to-host communication services for applications.\n TCP Transport Control Protocol   UDP User Datagram Protocol  ","date":1639267200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1639267200,"objectID":"99ef2260487e9fde9dc4aa57ee212325","permalink":"https://panxycris.github.io/note/computer-network/transport-layer/","publishdate":"2021-12-12T00:00:00Z","relpermalink":"/note/computer-network/transport-layer/","section":"note","summary":"Provide host-to-host communication services for applications.\n","tags":null,"title":"Transport Layer","type":"book"},{"authors":null,"categories":null,"content":"A layer for packet forwarding including routing through intermediate routers.\n DHCP Dynamic Host Configuration Protocol   Network Translator Network Address and Port Address Translator  ","date":1639699200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1639699200,"objectID":"b5c1e9812e22f4101f189cbc32ca335f","permalink":"https://panxycris.github.io/note/computer-network/network-layer/","publishdate":"2021-12-17T00:00:00Z","relpermalink":"/note/computer-network/network-layer/","section":"note","summary":"A layer for packet forwarding including routing through intermediate routers.\n","tags":null,"title":"Network Layer","type":"book"},{"authors":null,"categories":null,"content":"One-to-many or many-to-many communications\nFeature  Use less network resources Implement with the help of IGMP and additional routing protocols  Multicast addressing  Defined by a class D IP address  Leading bits: 1110 ‚Üí 224.0.0.0 I ‚Äì 239.255.255.255   Ethernet multicast address(48-bit)  (1-bit) set if the address is an Ethernet multicast address (23-bit) vendor component (24-bit) group identifier: assigned by vendor    Multicast address mapping\n For sender, IP multicasting directly mapped to an Ethernet multicast address  Range ‚Üí 01:00:5e:00:00:00 - 01:00:5e:7f:ff:ff No need for ARP request and reply Only the last 23 bits of the IP address is mapped into the multicast MAC address   For receiver, the interface should then be able to receive all the multicast IP datagrams  The IP module maintains a list of group memberships, which is updated when an upper layer process joins or leaves a group. Packet filtering: the interface card may receive multicast frames in which the host is really not interested.    Multicast group management  Dynamic: Users may join and leave the group during the multicast session For router: Keep track of the memberships of all the multicast groups For participant host: Know who else is in the group  IGMP\nInternet Group Management Protocol\nUsed by multicast routers to keep track of membership in a multicast group\nFunction  Joining a multicast group Query membership Send membership reports  IGMP Packet Format    IGMP messages are carried in IP datagrams with protocol number. IGMPv1 and IGMPv2 messages are only 8 bytes long. Max Response Time: applicable only to membership query messages, specifying the maximum allowed time before sending report message in units of 1/10 sec.  IGMPv3:\n  For IGMPv3, it allows hosts to specify a list of hosts from which they want to receive traffic from. Traffic from other hosts is then blocked.\nThree type of queries:\n General Query: Group address set to 0 when sent; group address is specified when replied Group-Specific Query: Group address set to the address being queried ‚Äì introduced by IGMPv2 Group-and-Source-Specific Query: Both group address and source address(es) being queried are specified ‚Äì introduced by IGMPv3  IGMP Working Process Router\n Periodically send host membership queries to discover which multicast groups have members on their attached local networks.  Interval: 60 second by default. Queries are sent to the class D address 224.0.0.1 (all host in the subnet) with a TTL of 1. Use 0.0.0.0 as the Group Address for all multicast groups   Maintains a multicast group membership table  Record which groups have members in the local networks attached to each interface of the router Decide which ports to forward a multicast datagram to    Host\n Responds to a IGMP query with one IGMP report for each multicast group in which it is a member  The destination IP address is identical to the multicast group it is reporting on Avoid of a flood of reports: delay an IGMP report for a random amount of time Overhears a report reporting on the same group address: cancel the reports   Leaves a multicast group  IGMPv1: Do nothing, membership in router will be removed when expires Later version: Report to all routers (with Type value of 0x17)    Multicast routing Two modes of multicast routing protocol  Source-Tree  Dijkstra‚Äôs algorithm to find Shortest Path Tree Pro: Multicast datagrams from a source are distributed in the shortest path tree ‚Üí a better delay performance Con: Each multicast router has to maintain state for all sources in all the multicast groups. Too costly for a large number of multicast sessions   Shared-Tree  The performance depends on how the Rendezvous Point (RP) is chosen Pro: Greatly reduce the number of states in the routers Con: Traffic concentration problem, large delay and jitter    Protocols  DVMRP(Distance Vector Multicast Routing Protocol)  Distance vector based multicast, count-to-infinity as RIP Source-Tree Flood-and-prune approach TTL Threshold: TTL \u0026lt; Threshold ‚Üí A router will not forward a multicast/broadcast datagram   MOSPF(Multicast Extension to OSPF)  Link State algorithm for intra-domain multicast routing protocol, like OSPF Source-Tree A new group membership LSA (Link‚ÄìState Advertisement): include group membership in link information   CBT(Core Based Tree)  Shared-Tree An hierarchical structure: Core router First, All other tree routers request to join the core to build the routing table for each multicast group Not broadcast the first datagram  Traffic load is greatly reduced Suitable for large-scale and dense system   Routing Table size is reduced  A router only needs to store information for each multicast group The number of CBT router entries is the same as the number of active groups   Traffic Concentration Problem   PIM(Protocol Independent Multicast)  Two Modes  Dense mode: Source-based trees used, works like DVMRP Sparse mode: A group-shared tree built from a RP (with backups), like CBT      Multicast application  DNS multicast query  provides a way to locate nearby domain name servers without knowing their IP addresses. The Recursion Desired bit should not be set in order to avoid excessive load on both network and DNS servers.   RIPv2  multicast RIP messages only to RIP routers (224.0.0.9) instead of to all routers in RIPv1.   SNMP  support group communication between managers and broker agents.   ICMP  router solicitation and router advertisement: a host can multicast an ICMP router solicitation massage to all routers in this subnet (specified by 224.0.0.2) after bootstrapping to build its routing table.   IP Multimedia Streaming for video teleconferencing, Internet audio, IPTV, and video streaming. IPTV  Leverage household access and existing IP network to provide bundled phone, internet, TV (triple play) services IGMP Snooping ‚Üí for broadcast  Learn the multicast group membership Only forwarded to ports that have members of that group(no need for broadcast) Significantly reduce multicast traffic delivered to or passing through downstream devices     ","date":1639699200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1639699200,"objectID":"03a4eb9dc3c0020269edb71ca7c8d36b","permalink":"https://panxycris.github.io/note/computer-network/multicast/","publishdate":"2021-12-17T00:00:00Z","relpermalink":"/note/computer-network/multicast/","section":"note","summary":"One-to-many or many-to-many communications\n","tags":null,"title":"Multicast","type":"book"},{"authors":null,"categories":null,"content":"Handle an amount of work that resources can be added to the system.\nTwo modes  Vertical scale  add more computing power -\u0026gt; single node   Horizontal scale  add more machines or resources -\u0026gt; more nodes    Load Balancing Target  Minimize server response time Maximize throughput  Methods  Random Round Robin Least Connection Least Response Time Least Bandwith Hashing  Hash various data including connection or header information   Custom Load  Query the load on individual servers via SNMP CPU usage, memory and response time Combine to suit their requests    Example DNS\nDNS adopts Round Robin algorithm to return DNS Lookup response.\n  In this lookup search, we can see that multiple times search www.google.com we can get different IP addresses from DNS servers. It permutes the servers in the list one by one.\nBut also, load balancer for DNS attempts to re-order the list to give priority to numerically \u0026ldquo;closer\u0026rdquo; networks according to different locations.\nCaching Cache is lightning-fast, and helps record the most frequent data query, request or object. It holds every dataset in RAM and requests are handled as fast as technically possible.\nThe data for caching  Cached Database Queries Cahced Object  Tool   Redis\n Advantages  Extra database-features like persistence Lots of Data Types Both clients and servers cache the data   AOF Log(Append Only File)  Appending all write operations received by the server   RDB Snapshot  Backup file, take a full snapshot of the current Redis state      Memcached\n MultiThreaded Simplicity, ease of use, easy setup    Database Partition/Sharding  A horizontal partitioning method The data is partitioned accross multiple servers Procsessing workload against a large table can be spread  Replication Setting up a separate copy of the data on a different node.\n Read the database logs Each change of the database is replicated to other copies  A replication engine can be used.\n Easy to setup On-going administration and management Additional storage for each replication Additional I/O and CPU usage to support the data replication process  Asynchronism","date":1638835200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1638835200,"objectID":"ea6d7908827063c762308c6a06a5a9c9","permalink":"https://panxycris.github.io/note/system-design/scalability/","publishdate":"2021-12-07T00:00:00Z","relpermalink":"/note/system-design/scalability/","section":"note","summary":"Handle an amount of work that resources can be added to the system.\n","tags":null,"title":"Scalability","type":"book"},{"authors":null,"categories":null,"content":"Problem description You have n computers. You are given the integer n and a 0-indexed integer array batteries where the $i^{th}$ battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries.\nInitially, you can insert at most one battery into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.\nNote that the batteries cannot be recharged.\nReturn the maximum number of minutes you can run all the n computers simultaneously.\nConstraints  1 \u0026lt;= n \u0026lt;= batteries.length \u0026lt;= $10^5$ 1 \u0026lt;= batteries[i] \u0026lt;= $10^9$  Solution For this kind of problem, we always find it hard to get this extreme value. But if we change a thought, when given the result, can we implement this method? Like in this problem, when given an amount of minutes, can we run all the n computers simultaneously? When the situation changes, this problem is converted into a binary search problem. We can set a left and right boundary of this amount of minutes, and we use binary search to get the final value of our solution.\nThus, how can we determine whether we can run n computers simultaneously when given a special number of minutes? We can set k as the given number of minutes. And for target as the summation number of minutes of n computers.\n#define ll long long  ll target = n * k; And for each battery, it can only choose its maximum volumne of electricity, so each one choose either its volume or k number of minutes for running time.\nll res = 0; for(int battery: batteries){ res += battery \u0026lt; k ? battery : k; if(res \u0026gt;= target) return true; } When the result reaches the target number of minutes, it proves that k number of minutes can fit the solution. All of the code shows like this\n#define ll long long class Solution { public: ll maxRunTime(int n, vector\u0026lt;int\u0026gt;\u0026amp; batteries) { ll sum = 0; for(int battery: batteries) sum += battery; ll l = 0, r = sum/n; while(l \u0026lt; r){ ll mid = l + (r-l)/2 + 1; // target value rounds up to an integer  if(canFit(n, mid, batteries)){ l = mid; }else r = mid - 1; } return l; } ll canFit(int n, ll k, vector\u0026lt;int\u0026gt;\u0026amp; batteries){ ll target = n * k; ll res = 0; for(int battery: batteries){ res += battery \u0026lt; k ? battery : k; if(res \u0026gt;= target) return true; } return res \u0026gt;= target; } }; The problem is cited from Leetcode 2141. Maximum Running Time of N Computers. And the solution is cited from [Java] Simple Solution w. Explanation - Chen-Yiyang.\n","date":1642464000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642464000,"objectID":"9d2d7180b4ec03c3dac0e57284cb5ff0","permalink":"https://panxycris.github.io/note/leetcode/binary-search/maximum-running-time-of-n-computers/","publishdate":"2022-01-18T00:00:00Z","relpermalink":"/note/leetcode/binary-search/maximum-running-time-of-n-computers/","section":"note","summary":"","tags":null,"title":"Maximum Running Time of N Computers","type":"book"},{"authors":null,"categories":null,"content":"Problem description Design a Leaderboard class, which has 3 functions:\n addScore(playerId, score): Update the leaderboard by adding score to the given player\u0026rsquo;s score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given score. top(K): Return the score sum of the top K players. reset(playerId): Reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). It is guaranteed that the player was added to the leaderboard before calling this function.  Initially, the leaderboard is empty.\nConstraints  1 \u0026lt;= playerId, K \u0026lt;= 10000 It\u0026rsquo;s guaranteed that K is less than or equal to the current number of players. 1 \u0026lt;= score \u0026lt;= 100 There will be at most 1000 function calls.  Solution  It is easy to see that we need to have a map to keep a key-value relationship of playerId and score. So whether for function addScore(playerId, score) or reset(playerId), we can easily to set or erase(also we can set to 0, but for better performance) the score of each player. The core problem is top(K) function, which requires us to the sum score. Due to the contraints lots of function calls, we need to assure that top(K) function $\\leq O(logn)$ rather than a linear time complexity. This constraint requires us for another data structure of $O(logn)$ to store the scores. In most cases, this data structure needs to be another map for score and player, but multiple scores in this case, so the value of the map needs to be an array, which makes us to design an another data structure to store the index of players in this array(reduce search time complexity). So for the scores, we will have a sorted set to store it.  Cpp There is a multiset data structure that can save same values and also is a sorted data structure, which meets our requirements.\nWe keep an unordered_map player_score to save the playerId and score. And for a sorted multiset to store the scores.\nunordered_map\u0026lt;int,int\u0026gt; player_score; multiset\u0026lt;int\u0026gt; scores; For reset(playerId) function, we set a multiset.find to get the index of one of this score. And we erase this score and the player.\nvoid reset(int playerId) { auto it = scores.find(player_score[playerId]); scores.erase(it); player_score.erase(playerId); } For remnant part, it is quick and easy to see. Let\u0026rsquo;s show all of it.\nclass Leaderboard { public: Leaderboard() {} void addScore(int playerId, int score) { if(player_score.find(playerId)!=player_score.end()){ score += player_score[playerId]; reset(playerId); } player_score[playerId] = score; scores.insert(score); } int top(int K) { int sum = 0; for(auto it=scores.rbegin();K\u0026gt;0;K--,it++){ sum += *it; } return sum; } void reset(int playerId) { auto it = scores.find(player_score[playerId]); scores.erase(it); player_score.erase(playerId); } private: unordered_map\u0026lt;int,int\u0026gt; player_score; multiset\u0026lt;int\u0026gt; scores; }; The problem is cited from Leetcode 1244. Design A Leaderboard. And the solution is cited from mtobeiyf ‚Äî‚Äî C++ Multiset + Map Solution.\n","date":1640822400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640822400,"objectID":"ff150e26afa7a4026ae37c3646f20e60","permalink":"https://panxycris.github.io/note/leetcode/design/design-a-leaderboard/","publishdate":"2021-12-30T00:00:00Z","relpermalink":"/note/leetcode/design/design-a-leaderboard/","section":"note","summary":"","tags":null,"title":"Design a Leaderboard","type":"book"},{"authors":null,"categories":null,"content":"In order to have a consistent data, we always have to synchronize multiple copies of the same data.\n    Weak Consistency Eventual Consistency Strong Consistency     After a write reads may or may not see it reads eventually will see it reads will see it   Scenario Real time cases such as VoIP, video chat DNS and Email Need Transactions system: file systems and RDBMSes    ","date":1640649600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640649600,"objectID":"f4ce5ae041f820e7ba08a860e460356c","permalink":"https://panxycris.github.io/note/system-design/cap/consistency/","publishdate":"2021-12-28T00:00:00Z","relpermalink":"/note/system-design/cap/consistency/","section":"note","summary":"In order to have a consistent data, we always have to synchronize multiple copies of the same data.\n    Weak Consistency Eventual Consistency Strong Consistency     After a write reads may or may not see it reads eventually will see it reads will see it   Scenario Real time cases such as VoIP, video chat DNS and Email Need Transactions system: file systems and RDBMSes    ","tags":null,"title":"Consistency","type":"book"},{"authors":null,"categories":null,"content":"In this topic, we introduced a simple history of HTTP evolvation. And we compare the pros and cons of each of them.\nHTTP Transfer progress\nWhen TCP connection has already initiated, HTTP begins to be transferred.\nHTTP 1.0  Non-persistant HTTP  At most one object sent over TCP connection Multiple Objects required multiple connections   Response Time  2RTT + file transmission Time      HTTP 1.1  Persistant HTTP  Subsequent HTTP messages sent over the open connection   FCFS  HOL Blocking Problem      HTTP/2  Stream  Multiplexed Prioritized   Binary Framing Layer  A Layer in the application layer Help HTTP Multiplexed to the frame, each frame can contain only header or data      HTTP/3  QUIC(Quick UDP Internet Congestion)  Based on UDP Adopts approaches of TCP connection establishment  Reliability, congestion control, authentication, encryption      Here is a comparison of TLS and QUIC\n ","date":1639094400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1639094400,"objectID":"acb9293d9a0e296137a37ee10ccb0933","permalink":"https://panxycris.github.io/note/computer-network/application-layer/http/","publishdate":"2021-12-10T00:00:00Z","relpermalink":"/note/computer-network/application-layer/http/","section":"note","summary":"In this topic, we introduced a simple history of HTTP evolvation. And we compare the pros and cons of each of them.\n","tags":null,"title":"HTTP","type":"book"},{"authors":null,"categories":null,"content":"To support a high availability, there are two complemenrary problems.\nFail-Over     Active-passive Active-active     Entity An active server and a passive server Two active servers   Running Pattern heartbeats are sent between the active and the passive server on standby both servers are managing traffic, spreading the load between them.   Feature When the heartbeat is interrupted, the passive server takes over the active\u0026rsquo;s IP address and resumes service. If the servers are public-facing, the DNS would need to know about the public IPs of both servers. If the servers are internal-facing, application logic would need to know about both servers.     Disadvantage  Fail-over adds more hardware and additional complexity. There is a potential for loss of data if the active system fails before any newly written data can be replicated to the passive.    Replication Master-slave vs master-master\nSequence vs Parallel For sequence\n$Availability_{Total}= Availability_{Foo} \\times Availability_{Bar}$\nIf both Foo and Bar each had 99.9% availability, their total availability in sequence would be 99.8%.\nFor parallel\n$Availability_{Total} = 1 - (1 - Availability_{Foo}) \\times (1 - Availability_{Bar})$\nIf both Foo and Bar each had 99.9% availability, their total availability in parallel would be 99.9999%.\nThe content is cited from System design primer \u0026ndash; Avalability Patterns.\n","date":1643068800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643068800,"objectID":"5c1e598362fb42b36af68918da4e2fc1","permalink":"https://panxycris.github.io/note/system-design/cap/availability/","publishdate":"2022-01-25T00:00:00Z","relpermalink":"/note/system-design/cap/availability/","section":"note","summary":"To support a high availability, there are two complemenrary problems.\nFail-Over     Active-passive Active-active     Entity An active server and a passive server Two active servers   Running Pattern heartbeats are sent between the active and the passive server on standby both servers are managing traffic, spreading the load between them.   Feature When the heartbeat is interrupted, the passive server takes over the active\u0026rsquo;s IP address and resumes service.","tags":null,"title":"Availability","type":"book"},{"authors":null,"categories":null,"content":"Problem description Design a data structure, which has 3 functions:\n add(element): Update the data structure by adding an integer. delete(element): Update the data structure by deleting an integer, if there are lots of integers, just delete one, if this element does not exist, do nothing. getRandom(): Return an element of the data structure randomly, the probability of each element should be equal.  Constraints 3 functions in $O(1)$ time complexity.\nSolution The difficulty of this problem is $O(1)$ time complexity. Due to multiple same values in this problem, we can design a set that can save same values.\nCpp unordered_multiset can be used. Not only for function add(element), delete(element), we can add and delete the element in $O(1)$ time complexity, but also for function getRandom(), we can easily use its size to return a value randomly.\nThe data strcture is like this:\nunordered_multiset\u0026lt;int\u0026gt; elements; For delete(element) function, we can find one of this element and delete it.\nvoid delete(int element){ auto it = elements.find(element); if(it!=elements.end()) elements.erase(it); } For getRandom() function, we can use the size of multiset to get a random one.\nint getRandom(){ return *(elements.begin()+rand()%elements.size()); } Let\u0026rsquo;s show all of the code:\nclass MagicSet{ public: MagicSet(){} void add(int element){ elements.insert(element); } void delete(int element){ auto it = elements.find(element); if(it!=elements.end()) elements.erase(it); } int getRandom(){ return *(elements.begin()+rand()%elements.size()); } private: unordered_multiset\u0026lt;int\u0026gt; elements; }; ","date":1640822400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640822400,"objectID":"64aa141de313d0040396f5e07fde8c7f","permalink":"https://panxycris.github.io/note/leetcode/design/randomly-pick-an-element/","publishdate":"2021-12-30T00:00:00Z","relpermalink":"/note/leetcode/design/randomly-pick-an-element/","section":"note","summary":"","tags":null,"title":"Randomly pick an element","type":"book"},{"authors":null,"categories":null,"content":"Maintain user/server state\nHTTP GET/response is stateless, so in the server, we always create a cookie for each client, so that in following transactions, the server can track the request state of each client.\nPrivacy In each website, it always asks for your sancation for the cookies, you can browse a new webpage that you never browsed before to try it.\nComponents  cookie header line of HTTP response message cookie header line in next HTTP request message cookie file kept on user‚Äôs host, managed by user‚Äôs browser back-end database at website  What a site creates for cookie  unique ID (aka ‚Äúcookie‚Äù) entry in backend database for ID  Working process Here is a graph to show how a cookie works\n ","date":1639094400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1639094400,"objectID":"8567b569a49f4450d6b0d30b44f96fd2","permalink":"https://panxycris.github.io/note/computer-network/application-layer/cookie/","publishdate":"2021-12-10T00:00:00Z","relpermalink":"/note/computer-network/application-layer/cookie/","section":"note","summary":"Maintain user/server state\n","tags":null,"title":"Cookie","type":"book"},{"authors":null,"categories":null,"content":"Content Delivery Network\nA geographically distributed network of servers and their data centers that help in web content distribution to users with minimal delay.\nHow does CDN work CDN works by bringing content closer to the geographic location of the end users.\n Located data centers situated around the world Within each Points of Presence (PoPs) are thousands of caching servers Improve connectivity and accelerate the speed at which content is delivered to the end user.    Work process  The user sends a request to the business‚Äô web server to retrieve all the page‚Äôs components The assets are retrieved from the origin server and once delivered are stored in the PoP edge caching server close to the end user. When the same user requests the same assets the next time, the requests don‚Äôt go to the origin server. Instead the requests go to the cached files from the PoP server to see if the stored assets are still available and deliver them to the user.  If they are not available or the caching server has not cached the assets yet, the request is sent to the origin server again. Once your static assets are cached on all the CDN servers for a particular location, all subsequent website visitor requests for static assets will be delivered from these edge servers instead of the origin server.    Push CDN and Pull CDN     Push CDN Pull CDN     feature Receive it whenever changes occur grad new content when the first user requests the content   Timeliness Can configure when content expires and when it is updated A TTL determines how long content is cached   Applicable scene Frequently updated, less users requests High Traffic, Small download    Benefits  Faster delivery Optimize bandwidth and latency Improve website security  Offer Distributed Denial of Service or DDoS protection by distributing the malicious requests across the network   Help control access to different regions  Delegate authentication tasks to the edge Help in collecting logs and analyzing user-generated data    Disadvantages  Costs depends on traffic Content may be stale if it is updated before TTL expires CDNs require changing URLs for static content to point to the CDN  The content cited from CDNetworks.\n","date":1639094400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1639094400,"objectID":"f6b6a5dbc4fb120fb85f9c412fa608e4","permalink":"https://panxycris.github.io/note/computer-network/application-layer/cdn/","publishdate":"2021-12-10T00:00:00Z","relpermalink":"/note/computer-network/application-layer/cdn/","section":"note","summary":"Content Delivery Network\n","tags":null,"title":"CDN","type":"book"},{"authors":null,"categories":null,"content":"Network Time Protocol\nProvide accurate timing in the network and synchronize routers, hosts, and other network devices.\n  Structure NTP timing service uses a hierarchical architecture organized into 16 stratums\n An NTP primary server, or stratum-1, is synchronized with a high precision clock At least 175,000 hosts running NTP in the Internet  Operation Mode  Clients and servers can operate in the multicast or broadcast mode. NTP client synchronize with a server in two ways  Query time information from and synchronize to a remote NTP server, use rdate or ntpdate Synchronize with a remote server continuously and automatically, use ntpd   ","date":1639094400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1639094400,"objectID":"4076140e90f1f4d710df7a5e20f61f3d","permalink":"https://panxycris.github.io/note/computer-network/application-layer/ntp/","publishdate":"2021-12-10T00:00:00Z","relpermalink":"/note/computer-network/application-layer/ntp/","section":"note","summary":"Network Time Protocol\n","tags":null,"title":"NTP","type":"book"},{"authors":null,"categories":null,"content":"Simple Network Management Protocol\nExchange management information between network devices\n Each Managed Device, a host or a router, maintains a number of Management Information Bases (MIBs) Each managed device has an SNMP Agent to provide interface between MIBs and an SNMP Manager An SNMP manager, usually implemented in Network Management System (NMS), can work with multiple SNMP agents Uses well-known UDP port number 161/162 at the agent/manager  SNMP Message Format    Community Name  Access scope for SNMP managers and agents A different community name will be discarded   Protocol Data Unit (PDU) Type specifies the SNMP message type Request ID: match an SNMP request with the corresponding response  MIB (Management Information Bases) A managed device maintains a large number of SNMP objects to store management information. The Structure of Management Information (SMI) defines the rules for describing management information and the data types used in SNMP.\n Tree Structure  Each level of the tree consists of groups Each group has its name and the associated numerical identifier Leaves in the mib-2 subtree are MIB objects    Here is an example for MIB Tree Structure:\n  The leaf tcpMaxConn can be defined as 1.3.6.1.2.1.6.4 or iso.org.dod.internet.mgmt.mib-2.tcp.tcpMaxConn.\n","date":1639180800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1639180800,"objectID":"b9f3d4c728b25d32a3b8aba89f85da41","permalink":"https://panxycris.github.io/note/computer-network/application-layer/snmp/","publishdate":"2021-12-11T00:00:00Z","relpermalink":"/note/computer-network/application-layer/snmp/","section":"note","summary":"Simple Network Management Protocol\n","tags":null,"title":"SNMP","type":"book"},{"authors":null,"categories":null,"content":"Problem description Given a binary array data, return the minimum number of swaps required to group all 1‚Äôs present in the array together in any place in the array.\nConstraints  $1 \\leq$ data.length $ \\leq 10^5$ data[i] is either 0 or 1.  Solution This problem asks us to return minimum number of swaps, which means that we do not need to take real swap actions for given array. And we can find that the value in this array is either 0 or 1 within the constraints, so we could keep a sliding window of the length that is equal to the number of 1 in the array.\n$Len_{window} = Num_{1}$\nIn this way, for those positions of value 0, which means that we could swap them with 1, so this problems turns to that we need to find a sliding window with minimum number of 0.\nWe can set two pointers of left and right boundary to control this sliding window.\nCode class Solution { public: int minSwaps(vector\u0026lt;int\u0026gt;\u0026amp; data) { int ones = 0, len = data.size(); int cnt_one = 0, max_one = 0; int left = 0, right = 0; for(int num:data) // get the sum of the number of 1  ones += num; while(right \u0026lt; n){ cnt_one += data[right++]; if(right - left \u0026gt; ones){ // maintain the length of the window to ones  cnt_one -= data[left++]; } max_one = max(max_one, cnt_one); } return ones - max_one; } }; The problem is cited from Leetcode 1151. Minimum Swaps to Group All 1\u0026rsquo;s Together. And the solution is cited from LeetCode Official Solution Approach 1: Sliding Window with Two Pointers.\n","date":1641859200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641859200,"objectID":"0ca1bb801369b2e748a2891ffc9e5e67","permalink":"https://panxycris.github.io/note/leetcode/sliding-window/minimum-swaps-to-group-all-1s-together/","publishdate":"2022-01-11T00:00:00Z","relpermalink":"/note/leetcode/sliding-window/minimum-swaps-to-group-all-1s-together/","section":"note","summary":"","tags":null,"title":"Minimum Swaps to Group All 1's Together","type":"book"},{"authors":null,"categories":null,"content":"Transport Control Protocol\nFeature  Connection-oriented, reliable Unicast only Stream oriented Error Control, Flow Control, Congestion Control  TCP Header    Sequence number: Identifies the byte in the stream of data from the sending TCP to the receiving TCP that the first byte of data in this segment represents(offset) Acknowledgement Number: The next sequence number that the host wants to receive Flags  URG: an urgent message is being carried. ACK: the acknowledgment number is valid. PSH: a notification from the sender to the receiver that it should pass all the data received to the application as soon as possible. RST: signals a request to reset the TCP connection. SYN: set when initiating a connection. FIN: set to terminate a connection.    TCP Connection Establishment   Termination   Error Control Each data byte has a unique sequence number. The receiver uses cumulative acknowledgments(by default) to inform the sender of the last correctly received byte in order.\nError detection is performed in each layer of the TCP/IP stack by means of header checksums, and errored packets are dropped.\nSelective acknowledgment (SACK) SACK is used to report multiple lost segments. The receiver uses the TCP SACK option to acknowledge all segments that has been successfully received in the last window of segments, and the sender can retransmit more than one lost segment at a time.\n  In this example, left edge of SACK is seq=1126009, which means that seq = 1126009 is received, but seq = 1126009-1448 = 1124561 is lost, so the sender will retransmit this datagram.\nRetransmisson Timer TCP will also set a Timer to measure whether the sended message will be received. If no ack received when the timer expires, this segment will be retransmitted.\n The Timer value should be larger than but of the same order of magnitude as a measurement of the Round Trip Time (RTT). TCP continuously measure the RTT and updates the retransmission timer value, defined as Retransmission TimeOut (RTO), dynamically.  Interactive data flow TCP supports interactive data flow for interactive user applications, such as telnet and ssh.\nTo reduce the number of small segments to be more efficient:\nDelayed ACK Set a Timer: goes off every K ms. Send all acks every K ms.\nNagle Algorithm Set a Window: when reach MSS, all buffered bytes are sent in a single segment.\nCongestion Control Sliding window buffer for both sender(cwnd) and receiver(awnd/rwnd).\n  For sender:\nHere is a graph to show that the process of congestion control:\n  Serveral phases:\n Slow Start(cwnd $\\leq$ ssthresh):  cwnd = cwnd + segsize(= MSS), when receives an ACK Exponentially increases When timeout, it enters this phase again   Congestion Avoidance(cwnd \u0026gt; ssthresh):  cwnd = cwnd + segsize x segsize / cwnd + segsize / 8 Linearly increases   Fast Recovery(Three duplicate ACKs are received)  ssthresh = max [ 2 segsize, min (cwnd, awnd)/2 ] Retransmit a segment if allowed by the window size    For receiver:\n   Event Action     In-order segment, already ACKed delayed ACK, wait up to 500ms for another segment, if not, send ACK   In-order segment, ACK pending Immediately send single cumulative ACK   Out-of-order, Gap detected Immediately send duplicate ACK, indicating next expected ACK   Partially or completely fills gap Immediately send ACK, provided that segment starts at lower end of gap   ","date":1639785600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1639785600,"objectID":"c2aa9920fb1cbbe271d8826b67116eab","permalink":"https://panxycris.github.io/note/computer-network/transport-layer/tcp/","publishdate":"2021-12-18T00:00:00Z","relpermalink":"/note/computer-network/transport-layer/tcp/","section":"note","summary":"Transport Control Protocol\n","tags":null,"title":"TCP","type":"book"},{"authors":null,"categories":null,"content":"User Datagram Protocol\nFeature  Connectionless, unreliable Unicast and multicast Datagram oriented  UDP Format    Port numbers  Identify sending and receiving applications (processes). The maximum value for a port number is 216-1= 65535 1-1023: Well-known, used by servers, fixed 1024-49151: Registered, used by ordinary user processes $\u0026gt;$49151: Dynamic/private, used by clients, randomly picked   ","date":1639699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1639699200,"objectID":"876dce16105d9929c2923364effa132b","permalink":"https://panxycris.github.io/note/computer-network/transport-layer/udp/","publishdate":"2021-12-17T00:00:00Z","relpermalink":"/note/computer-network/transport-layer/udp/","section":"note","summary":"User Datagram Protocol\n","tags":null,"title":"UDP","type":"book"},{"authors":null,"categories":null,"content":"Dynamic Host Configuration Protocol\nDesigned to dynamically configure TCP/IP hosts in a centralized manner from DHCP server.\nFunction Configure parameters in a subnet dynamically\n IP Address, Subnet mask, default gateway IP address  Process Here is a graph to show how DHCP works\n    A client first broadcasts a DHCP DISCOVERY message on its local physical network\n The message has 0.0.0.0 as the source IP address The message may be forwarded by relay agents to servers in other physical networks    Each server may respond with a DHCPOFFER message with an available network address in the Your IP Address field\n  The client may receives more than one DHCPOFFER messages\n It chooses one server from all responding servers based on the offered IP address and the lease duration. The client then broadcasts a DHCPREQUEST message with the Server Identifier option to indicated the selected server.    When the DHCPREQUEST message is received, only the chosen server responds with a DHCPACK message carrying a full set of configuration parameters to the client.\n When the client receives, it checks the parameters and configures its TCP/IP modules using the parameters. The message specifies the duration of the lease. When the lease expires, the client may ask the server to renew it. Otherwise, the address will be put back in the pool or assigned to other hosts.    (When two DHCP servers are used) The client may send a DHCPRELEASE message to the server to relinquish the lease on the network address.\n  DHCP Message Format    Opcode: 1 ‚Äì a boot request from client; 2 ‚Äì a boot reply from server Hardware Address Type  The value is 1 for an Ethernet MAC address   Hop count  Optionally used by relay agents A DHCP relay agent is a host or router that forwards DHCP messages between DHCP clients and servers   Transaction ID  Randomly assigned to link requests and replies between a client and a server   Client HW address  The hardware address of the client For an Ethernet address, the first 6 bytes are filled and the remaining bytes are set to 0   Server hostname: Hostname of the DHCP server Boot filename  Use in a DHCPOFFER message to specify the fully qualified, null terminated path name of a file to bootstrap from    DHCP Relay Information Option Assign IP address based on its location. DHCP client in a Residential Gateway (RG) will send a DHCP request to an ISP Broadband Network Gateway. A network access node, such as an IP DSLAM, aggregates traffic from many users.\n","date":1639094400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1639094400,"objectID":"4151e7d428e09e4e9c86fa08677d1468","permalink":"https://panxycris.github.io/note/computer-network/network-layer/dhcp/","publishdate":"2021-12-10T00:00:00Z","relpermalink":"/note/computer-network/network-layer/dhcp/","section":"note","summary":"Dynamic Host Configuration Protocol\n","tags":null,"title":"DHCP","type":"book"},{"authors":null,"categories":null,"content":"Network Address and Port Address Translator\nNAT Network Address Translator\n Mapping one set of IP addresses (usually private) to another set of IP addresses (usually public). Used for  Reuse IP address: Share a small pool of IP addresses with a large number of hosts Security: internal network is invisible to the outside    PAT Port Address Translator\n Translate transport identifiers  TCP and UDP port numbers, ICMP query identifiers    Example Here is an example that shows how NAT and PAT works:\n ","date":1639094400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1639094400,"objectID":"4f9a6c0ecb76b1415637aac147c4dd18","permalink":"https://panxycris.github.io/note/computer-network/network-layer/network-translator/","publishdate":"2021-12-10T00:00:00Z","relpermalink":"/note/computer-network/network-layer/network-translator/","section":"note","summary":"Network Address and Port Address Translator\n","tags":null,"title":"Network Translator","type":"book"},{"authors":["Xingyu Pan","Yu Pan","Dixin Chen","Ning Li"],"categories":[],"content":"  An Android App that recites GRE vocabulary.\n  It helps the customers manage words and scientifically makes a study plan according to The Ebbinghaus Forgetting Curve.\n  It is a coursework for Human-Computer Interaction Systems. And I completed the part of making the study plans.\n  ","date":1561334400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631666810,"objectID":"1ea71f472157c9ef6d230e721f5a3d1b","permalink":"https://panxycris.github.io/project/whaleword/","publishdate":"2019-06-24T00:00:00Z","relpermalink":"/project/whaleword/","section":"project","summary":"An Android App that recites GRE vocabulary","tags":[],"title":"WhaleWord","type":"project"},{"authors":["Xingyu Pan","Ning Li","Zhenfei Cao","Yu Ge","Jiewen Ran","Nan Liang","Zhong jie","Ping Zhang","Dixin Chen"],"categories":[],"content":" A platform for patent trading based on blockchain. The blockchain data structure based on Hyperledger  Services including patent trading, patent loan and insurance Users including buyers, buyees, banks, insurance companies, patent legacies and government   Developed the back end with Springboot and MySql.  ","date":1541241187,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631666810,"objectID":"ba9938ff6324dd1418508ac5c2c15f60","permalink":"https://panxycris.github.io/project/ipnet/","publishdate":"2018-11-03T18:33:07+08:00","relpermalink":"/project/ipnet/","section":"project","summary":"A platform for patent trading on blockchain","tags":[],"title":"IPNET","type":"project"},{"authors":["Yu Pan","Xingyu Pan","Ning Li","Dixin Chen"],"categories":[],"content":" A platform for data annotation labeling. The data annotation requester publishes images and videos on the platform, and the platform automatically labels, and then sends the lower recognition rate data to the workers to label. It is a coursework for Software Engineering and Computing III. And I completed front-end and optimize the recognition algorithm.  ","date":1529837645,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631666810,"objectID":"2fc8915a321406f504a2fe0cbc5654fd","permalink":"https://panxycris.github.io/project/utag/","publishdate":"2018-06-24T18:54:05+08:00","relpermalink":"/project/utag/","section":"project","summary":"A platform for crowdsourcing labeling","tags":[],"title":"UTag","type":"project"}]